version: 2.1

workflows:
  version: 2
  mbgl-core:
    jobs:
      - clang-checks
      - build-template:
          name: android-armeabi-v7a-release
          executor_name: ubuntu-disco
          executor_is_linux: true
          requires:
            - clang-checks
          config_params: '-G Ninja -DCMAKE_TOOLCHAIN_FILE=/opt/android/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_CCACHE=ccache -DANDROID_ABI=armeabi-v7a'
      - build-template:
          name: android-arm64-v8a-release
          executor_name: ubuntu-disco
          executor_is_linux: true
          requires:
            - android-armeabi-v7a-release
          config_params: '-G Ninja -DCMAKE_TOOLCHAIN_FILE=/opt/android/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_CCACHE=ccache -DANDROID_ABI=arm64-v8a'
      - build-template:
          name: android-x86-release
          executor_name: ubuntu-disco
          executor_is_linux: true
          requires:
            - android-armeabi-v7a-release
          config_params: '-G Ninja -DCMAKE_TOOLCHAIN_FILE=/opt/android/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_CCACHE=ccache -DANDROID_ABI=x86'
      - build-template:
          name: android-x86_64-release
          executor_name: ubuntu-disco
          executor_is_linux: true
          requires:
            - android-armeabi-v7a-release
          config_params: '-G Ninja -DCMAKE_TOOLCHAIN_FILE=/opt/android/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_CCACHE=ccache -DANDROID_ABI=x86_64'
      - build-template:
          name: linux-gcc8-release
          executor_name: ubuntu-disco
          executor_is_linux: true
          requires:
            - clang-checks
          config_params: '-G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=gcc-8 -DCMAKE_CXX_COMPILER=g++-8'
      - build-template:
          name: linux-gcc4.9-release
          executor_name: ubuntu-disco
          executor_is_linux: true
          requires:
            - linux-gcc8-release
          config_params: '-G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=gcc-4.9 -DCMAKE_CXX_COMPILER=g++-4.9'
          build_params: '--target mbgl-core'
          test_params: '-N'
      - build-template:
          name: linux-gcc8-debug-coverage
          executor_name: ubuntu-disco
          executor_is_linux: true
          requires:
            - linux-gcc8-release
          config_params: '-G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=gcc-8 -DCMAKE_CXX_COMPILER=g++-8 -DCMAKE_BUILD_TYPE=DebugCoverage'
      - build-template:
          name: linux-clang8-release
          executor_name: ubuntu-disco
          executor_is_linux: true
          requires:
            - clang-checks
          config_params: '-G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=clang-8 -DCMAKE_CXX_COMPILER=clang++-8'
      - build-template:
          name: linux-asan
          executor_name: ubuntu-disco
          executor_is_linux: true
          requires:
            - linux-gcc8-debug-coverage
          config_params: '-G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=clang-8 -DCMAKE_CXX_COMPILER=clang++-8 -DCMAKE_BUILD_TYPE=Sanitize -DMBGL_WITH_SANITIZER=address'
      - build-template:
          name: linux-tsan
          executor_name: ubuntu-disco
          executor_is_linux: true
          requires:
            - linux-gcc8-debug-coverage
          config_params: '-G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=clang-8 -DCMAKE_CXX_COMPILER=clang++-8 -DCMAKE_BUILD_TYPE=Sanitize -DMBGL_WITH_SANITIZER=thread'
      - build-template:
          name: linux-memsan
          executor_name: ubuntu-disco
          executor_is_linux: true
          requires:
            - linux-gcc8-debug-coverage
          config_params: '-G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=clang-8 -DCMAKE_CXX_COMPILER=clang++-8 -DCMAKE_BUILD_TYPE=Sanitize -DMBGL_WITH_SANITIZER=memory'
      - build-template:
          name: linux-ubsan
          executor_name: ubuntu-disco
          executor_is_linux: true
          requires:
            - linux-gcc8-debug-coverage
          config_params: '-G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=clang-8 -DCMAKE_CXX_COMPILER=clang++-8 -DCMAKE_BUILD_TYPE=Sanitize -DMBGL_WITH_SANITIZER=undefined'
      - build-template:
          name: qt5-linux-gcc5-release
          executor_name: ubuntu-disco
          executor_is_linux: true
          requires:
            - clang-checks
          config_params: '-G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=gcc-5 -DCMAKE_CXX_COMPILER=g++-5 -DMBGL_WITH_QT=ON'
          build_params: '--target mbgl-qt'
          test_params: '-Q -N'
      - build-template:
          name: qt5-macos-gcc5-release
          executor_name: macos-11_0_0
          executor_is_macos: true
          requires:
            - qt5-linux-gcc5-release
          config_params: '-G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DMBGL_WITH_QT=ON -DCMAKE_PREFIX_PATH=$(echo /usr/local/Cellar/qt/5.*/lib/cmake)'
          build_params: '--target mbgl-qt'
          test_params: '-Q -N'
      - build-template:
          name: macos-xcode11-release
          executor_name: macos-11_0_0
          executor_is_macos: true
          requires:
            - clang-checks
          config_params: '-G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache'
      - build-template:
          name: macos-xcode11-debug
          executor_name: macos-11_0_0
          executor_is_macos: true
          requires:
            - macos-xcode11-release
          config_params: '-G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=Debug'
      - build-template:
          name: ios-xcode11-release
          executor_name: macos-11_0_0
          executor_is_macos: true
          requires:
            - clang-checks
          config_params: '-G Xcode -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_SYSROOT=iphonesimulator'
          build_params: '--config Release'
          test_params: '-Q -N'

commands:
  prepare:
    steps:
      - restore_cache:
          keys:
            - 'ccache-v1-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}'
            - 'ccache-v1-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-'
            - 'ccache-v1-{{ .Environment.CIRCLE_JOB }}-master'
            - 'ccache-v1-{{ .Environment.CIRCLE_JOB }}-'
      - run:
          name: Prepare
          command: |
            git submodule update --init --recursive
            npm install --ignore-scripts
  prepare-macos:
    steps:
      - run:
          name: Prepare macOS
          command: |
            brew install cmake ccache glfw ninja pkgconfig qt
  config:
    parameters:
      config_params:
        type: string
    steps:
      - run:
          name: Configure
          command: |
            cmake . -B build << parameters.config_params >>
  build:
    parameters:
      build_params:
        type: string
    steps:
      - run:
          name: Build
          command: |
            ccache --zero-stats --max-size=2G
            cmake --build build -j 8 << parameters.build_params >>
            ccache --show-stats
      - save_cache:
          key: 'ccache-v1-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}'
          paths:
            - ~/.ccache
            - /Users/distiller/Library/Caches/Homebrew
  test:
    parameters:
      test_wrapper:
        type: string
      test_params:
        type: string
    steps:
      - run:
          name: Test
          command: |
            cd build
            << parameters.test_wrapper >> ctest -V << parameters.test_params >>

executors:
  ubuntu-disco:
    docker:
      # FIXME: Move the image to mbgl/
      - image: tmpsantos/mbgl_ci:1.2
    resource_class: large
    working_directory: /src
    environment:
      UBSAN_OPTIONS: print_stacktrace=1:halt_on_error=1
      MSAN_OPTIONS: poison_in_dtor=1
      ASAN_OPTIONS: strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1
  macos-11_0_0:
    macos:
      xcode: '11.0.0'

jobs:
  clang-checks:
    executor: ubuntu-disco
    steps:
      - checkout
      - prepare
      - config:
          config_params: '-DMBGL_WITH_CORE_ONLY=ON'
      - run:
          name: Clang Format
          command: |
            git diff -U0 --no-color origin/master... *.cpp *.hpp > patch.diff
            clang-format-diff-8 -p1 -i < patch.diff
            git diff --exit-code
      - run:
          name: Clang Tidy
          command: |
            git diff -U0 --no-color origin/master... src include > patch.diff
            clang-tidy-diff-8.py -clang-tidy-binary clang-tidy-8 -p1 -path build < patch.diff
  build-template:
    parameters:
      config_params:
        type: string
        default: ''
      build_params:
        type: string
        default: ''
      test_params:
        type: string
        default: ''
      executor_name:
        type: string
      executor_is_linux:
        type: boolean
        default: false
      executor_is_macos:
        type: boolean
        default: false
    executor: << parameters.executor_name >>
    steps:
      - checkout
      - prepare
      - when:
          condition: << parameters.executor_is_macos >>
          steps:
            - prepare-macos
      - config:
          config_params: << parameters.config_params >>
      - build:
          build_params: << parameters.build_params >>
      - when:
          condition: << parameters.executor_is_linux >>
          steps:
            - test:
                test_wrapper: 'xvfb-run -s -noreset'
                test_params: << parameters.test_params >>
      - when:
          condition: << parameters.executor_is_macos >>
          steps:
            - test:
                test_wrapper: ''
                test_params: << parameters.test_params >>


# FIXME: should only store failing results
#      - store_artifacts:
#          path: /src/mapbox-gl-js/test/integration/render-tests
#          destination: render-tests
#          when: on_fail

# TODO:
#      HOMEBREW_NO_AUTO_UPDATE: 1
#      HOMEBREW_NO_INSTALL_CLEANUP: 1
